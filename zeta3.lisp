;; zeta(3)
(defun fpzeta3 ()
  (let ((zeta3 (comp-zeta3 (+ fpprec 12))))
    (bcons (list (fpround (car zeta3)) (cadr zeta3))) ))

(defun comp-zeta3 (prec)
  (let ((fpprec prec)
        nr tt qq)
    (setq nr (ceiling fpprec 10)) ;; nr of summands
    (multiple-value-setq (tt qq) (split-zeta3 0 (1+ nr)))
    (setq qq (intofp qq))
    (fpquotient (intofp tt)
                (list (car qq) (+ 6 (cadr qq))))))

(defun split-zeta3 (i j)
  (let (aa pp qq tt)
    (if (= (- j i) 1)
        (if (= i 0)
            (setq aa 77 pp 1 qq 1 tt aa)
            (setq aa (+ 77 (* i (+ 250 (* i 205))))
                  pp (expt i 5)
                  qq (expt (+ (* 4 i) 2) 5)
                  tt (if (evenp i) (* aa pp) (- (* aa pp)))))
        (let ((m (ash (+ i j) -1)))
          (multiple-value-bind (tl ql pl) (split-zeta3 i m)
            (multiple-value-bind (tr qr pr) (split-zeta3 m j)
              (setq pp (* pl pr)
                    qq (* ql qr)
                    tt (+ (* qr tl) (* pl tr)))))))
    (values tt qq pp)))
