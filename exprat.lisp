;; exp(small_exponent)
(defun fpexp_rat (num)
  (let ((exp1 (compexp-rat (cadr num) (caddr num) (+ fpprec 10))))
    (bcons (list (fpround (car exp1)) (cadr exp1))) ))

(defun taylor-e-size-rat (prec u v)
  (let ((acc 0)
        (lim (* prec (log 2d0))))
    (do ((i 1 (1+ i))) 
        ((> (+ (* i (log (/ (float u 1d0) v))) acc) lim) i)
      (incf acc (log (float i 1d0))))))

(defun taylor-e-size (prec)
  (let ((acc 0)
        (lim (* prec (log 2d0))))
    (do ((i 1 (1+ i))) 
        ((> acc lim) i)
      (incf acc (log (float i 1d0))))))

(defun compexp-rat (u v prec)
  (let ((fpprec prec)
        nr tt qq)
    (setq nr (taylor-e-size-rat prec u v)) ;; nr of summands
    (multiple-value-setq (tt qq) (split-exp u v 0 (1+ nr)))
    (fpquotient (intofp tt)
                (intofp qq))))

(defun split-exp (u v i j)
  (let (pp qq tt)
    (if (= (- j i) 1) 
        (if (= i 0)
            (setq pp 1 qq 1 tt 1)
            (setq pp u
                  qq (* i v)
                  tt pp))
        (let ((m (ash (+ i j) -1)))
          (multiple-value-bind (tl ql pl) (split-exp u v i m)
            (multiple-value-bind (tr qr pr) (split-exp u v m j)
              (setq pp (* pl pr)
                    qq (* ql qr)
                    tt (+ (* qr tl) (* pl tr)) )))))
    (values tt qq pp)))
